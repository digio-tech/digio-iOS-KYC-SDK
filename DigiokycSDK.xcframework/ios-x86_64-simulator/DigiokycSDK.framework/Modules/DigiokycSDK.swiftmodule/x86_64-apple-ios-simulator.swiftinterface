// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target x86_64-apple-ios15.6-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name DigiokycSDK
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import AVFoundation
import Accelerate
import CoreLocation
@_exported import DigiokycSDK
import Foundation
import MLKitFaceDetection
import MLKitVision
import Photos
import Swift
import SystemConfiguration
import UIKit
import UserNotifications
import Vision
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public protocol DigioApiResponseListener {
  func onZipFileDownloadSuccess(data: Foundation.Data?)
  func onOTPVerify(responseData: Swift.String, statusCode: Swift.Int)
  func onResponseError(errorMessage: Swift.String, statusCode: Swift.Int)
  func onRequestDetailerSuccess(response: Foundation.NSDictionary?)
}
@_hasMissingDesignatedInitializers public class CameraLauncher {
  public static func present(from parent: UIKit.UIViewController, mode: DigiokycSDK.CameraMode, isImagePreview: Swift.Bool, shouldShowSwitchCameraButton: Swift.Bool, completion: @escaping (Swift.String?, UIKit.UIImage) -> Swift.Void)
  @objc deinit
}
public protocol DigioResponseDelegate {
  func onDigioStatelessResponseSuccess(response: [DigiokycSDK.DigioTaskResponse])
  func onDigioStatelessResponseFailure(response: [DigiokycSDK.DigioTaskResponse])
  func onDigioEventTracker(event: Swift.String)
}
@_hasMissingDesignatedInitializers public class ROI {
  public func isOutOf(topOffset: CoreFoundation.CGFloat, rightOffset: CoreFoundation.CGFloat, bottomOffset: CoreFoundation.CGFloat, leftOffset: CoreFoundation.CGFloat) -> Swift.Bool
  @objc deinit
}
public struct PermissionHelper {
}
public protocol DigioKYCDataDelegate {
  func clickedFinish(base64: Swift.String, sourceType: Swift.String, shareCode: Swift.String, fileName: Swift.String)
  func cancelledByUser()
  func onErrorRecived(statusCode: Swift.Int, errorMessage: Swift.String)
}
public class DigioTheme {
  public init(fontFamily: Swift.String!, fontUrl: Swift.String!, fontFormat: Swift.String!)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor @preconcurrency open class CameraView : UIKit.UIView {
  @objc @_Concurrency.MainActor @preconcurrency public var cameraEventListener: (any DigiokycSDK.CameraEventListenerDelegate)? {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @objc @_Concurrency.MainActor @preconcurrency public func startPreview()
  @objc @_Concurrency.MainActor @preconcurrency public func startCaptureType(_ captureType: Swift.String)
  @objc @_Concurrency.MainActor @preconcurrency public func stopAnalyzer()
  @objc @_Concurrency.MainActor @preconcurrency public func destroy()
  @objc @_Concurrency.MainActor @preconcurrency public func restartCapture(_ type: Swift.String)
  @objc @_Concurrency.MainActor @preconcurrency public func capture()
  @objc @_Concurrency.MainActor @preconcurrency public func toggleCameraLens()
  @objc @_Concurrency.MainActor @preconcurrency public func setCameraLens(_ cameraLens: Swift.String)
  @objc @_Concurrency.MainActor @preconcurrency public func getCameraLens() -> Swift.String
  @objc @_Concurrency.MainActor @preconcurrency public func setNumberOfImages(_ numberOfImages: Swift.Int)
  @objc @_Concurrency.MainActor @preconcurrency public func setTimeBetweenImages(_ timeBetweenImages: Swift.Int64)
  @objc @_Concurrency.MainActor @preconcurrency public func setOutputImageWidth(_ width: Swift.Int)
  @objc @_Concurrency.MainActor @preconcurrency public func setOutputImageHeight(_ height: Swift.Int)
  @objc @_Concurrency.MainActor @preconcurrency public func setSaveImageCaptured(_ enable: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func setDetectionBox(_ enable: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func setDetectionBoxColor(_ alpha: Swift.Float, _ red: Swift.Float, _ green: Swift.Float, _ blue: Swift.Float)
  @objc @_Concurrency.MainActor @preconcurrency public func setDetectionMinSize(_ minimumSize: Swift.Float)
  @objc @_Concurrency.MainActor @preconcurrency public func setDetectionMaxSize(_ maximumSize: Swift.Float)
  @objc @_Concurrency.MainActor @preconcurrency public var detectionTopSize: Swift.Float {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var detectionRightSize: Swift.Float {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var detectionBottomSize: Swift.Float {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public var detectionLeftSize: Swift.Float {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor @preconcurrency public func setFaceContours(_ enable: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func setFaceContoursColor(_ alpha: Swift.Float, _ red: Swift.Float, _ green: Swift.Float, _ blue: Swift.Float)
  @objc @_Concurrency.MainActor @preconcurrency public func setTorch(_ enable: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func setROI(_ enable: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func setROITopOffset(_ topOffset: Swift.Float)
  @objc @_Concurrency.MainActor @preconcurrency public func setROIRightOffset(_ rightOffset: Swift.Float)
  @objc @_Concurrency.MainActor @preconcurrency public func setROIBottomOffset(_ bottomOffset: Swift.Float)
  @objc @_Concurrency.MainActor @preconcurrency public func setROILeftOffset(_ leftOffset: Swift.Float)
  @objc @_Concurrency.MainActor @preconcurrency public func setROIAreaOffset(_ enable: Swift.Bool)
  @objc @_Concurrency.MainActor @preconcurrency public func setROIAreaOffsetColor(_ alpha: Swift.Float, _ red: Swift.Float, _ green: Swift.Float, _ blue: Swift.Float)
  @objc @_Concurrency.MainActor @preconcurrency public func setFaceDetectionStorkeColor(from color: UIKit.UIColor)
  @objc @_Concurrency.MainActor @preconcurrency public func setSuggestionMessage(message: Swift.String?, textColor: UIKit.UIColor, backgroundColor: UIKit.UIColor)
  @objc @_Concurrency.MainActor @preconcurrency public func setMinimumFaceSize(_ size: CoreFoundation.CGFloat)
  @objc deinit
}
public enum DigioTaskType : Swift.String {
  case OFFLINE_KYC
  case E_AADHAAR
  case ID_ANALYSIS
  case SELFIE
  case QRCODE_AADHAR
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum PermissionStatus {
  case granted
  case denied
  case notDetermined
  public static func == (a: DigiokycSDK.PermissionStatus, b: DigiokycSDK.PermissionStatus) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class PreviewLauncher {
  public static func launchPreview(from viewController: UIKit.UIViewController, image: UIKit.UIImage, imagePath: Swift.String, environment: DigiokycSDK.DigioEnvironment, clientId: Swift.String, secretKey: Swift.String, onComplete: @escaping () -> Swift.Void, onRetake: @escaping () -> Swift.Void)
  @objc deinit
}
@objc public enum CaptureType : Swift.Int {
  case NONE = 0
  case FACE = 1
  case QRCODE = 2
  case FRAME = 3
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class DigiFacefyController {
  public func detect(image: UIKit.UIImage, minFaceWidth: CoreFoundation.CGFloat = 40, onSuccess: @escaping (DigiokycSDK.FaceDetected?) -> Swift.Void, onError: @escaping (Swift.String) -> Swift.Void)
  @objc deinit
}
public enum CameraMode : Swift.String {
  case none
  case face
  case qrcode
  case frame
  case video
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum Message : Swift.String {
  case INVALID_MINIMUM_SIZE
  case INVALID_MAXIMUM_SIZE
  case INVALID_OUT_OF_ROI
  case INVALID_TORCH_LENS_USAGE
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public protocol CameraEventListenerDelegate {
  @objc func onImageCaptured(_ type: Swift.String, _ count: Swift.Int, _ total: Swift.Int, _ imagePath: Swift.String, _ darkness: Foundation.NSNumber?, _ lightness: Foundation.NSNumber?, _ sharpness: Foundation.NSNumber?)
  @objc func onFaceDetected(_ x: Swift.Int, _ y: Swift.Int, _ width: Swift.Int, _ height: Swift.Int, _ leftEyeOpenProbability: Foundation.NSNumber?, _ rightEyeOpenProbability: Foundation.NSNumber?, _ smilingProbability: Foundation.NSNumber?, _ headEulerAngleX: Foundation.NSNumber?, _ headEulerAngleY: Foundation.NSNumber?, _ headEulerAngleZ: Foundation.NSNumber?, _ darkness: Foundation.NSNumber?, _ lightness: Foundation.NSNumber?, _ sharpness: Foundation.NSNumber?, _ isMultiface: Swift.Bool, _ numberOfFaces: Swift.Int)
  @objc func onFaceUndetected()
  @objc func onEndCapture()
  @objc func onError(_ error: Swift.String)
  @objc func onMessage(_ message: Swift.String)
  @objc func onPermissionDenied()
  @objc func onQRCodeScanned(_ content: Swift.String)
}
public protocol DigioKycResponseDelegate {
  func onDigioKycResponseSuccess(successResponse: Swift.String)
  func onDigioKycResponseFailure(failureResponse: Swift.String)
  func onGateWayEvent(event: Swift.String)
}
@objc @_inheritsConvenienceInitializers final public class PermissionManager : ObjectiveC.NSObject {
  public static func status(for type: DigiokycSDK.PermissionType) -> DigiokycSDK.PermissionStatus
  public static func request(for type: DigiokycSDK.PermissionType, completion: @escaping (DigiokycSDK.PermissionStatus) -> Swift.Void)
  public static func openSettings()
  @objc override dynamic public init()
  @objc deinit
}
extension DigiokycSDK.PermissionManager : CoreLocation.CLLocationManagerDelegate {
  @objc final public func locationManager(_ manager: CoreLocation.CLLocationManager, didChangeAuthorization status: CoreLocation.CLAuthorizationStatus)
}
public class DigioKycBuilder {
  public init()
  public func setLogo(logo: Swift.String?) -> DigiokycSDK.DigioKycBuilder
  public func setEnvironment(environment: DigiokycSDK.DigioEnvironment) -> DigiokycSDK.DigioKycBuilder
  public func setDocumentId(documentId: Swift.String) -> DigiokycSDK.DigioKycBuilder
  public func setIdentifier(identifier: Swift.String) -> DigiokycSDK.DigioKycBuilder
  public func setTokenId(tokenId: Swift.String?) -> DigiokycSDK.DigioKycBuilder
  public func withController(viewController: UIKit.UIViewController) -> DigiokycSDK.DigioKycBuilder
  public func setKycResponseDelegate(delegate: any DigiokycSDK.DigioKycResponseDelegate) -> DigiokycSDK.DigioKycBuilder
  public func setStatelessResponseDelegate(delegate: any DigiokycSDK.DigioResponseDelegate) -> DigiokycSDK.DigioKycBuilder
  public func setAdditionalParams(additionalParams: [Swift.String : Swift.String]) -> DigiokycSDK.DigioKycBuilder
  public func setDigioKycScreen(screen: DigiokycSDK.DigioKYCFlow) -> DigiokycSDK.DigioKycBuilder
  public func setPrimaryColor(hexColor: Swift.String) -> DigiokycSDK.DigioKycBuilder
  public func setFontFormat(fontFormat: Swift.String) -> DigiokycSDK.DigioKycBuilder
  public func setFontFamily(fontFamily: Swift.String) -> DigiokycSDK.DigioKycBuilder
  public func setFontUrl(fontUrl: Swift.String) -> DigiokycSDK.DigioKycBuilder
  public func build() throws
  public func addTaskList(taskList: Swift.Array<DigiokycSDK.DigioTaskRequest>) -> DigiokycSDK.DigioKycBuilder
  public func setReferenceIdUninqueRequestId(referenceId: Swift.String?, uniqueRequestId: Swift.String?) -> DigiokycSDK.DigioKycBuilder
  public func build(clientId: Swift.String, clientSecretKey: Swift.String) throws
  @objc deinit
}
public enum DigioEnvironment : Swift.String {
  case PRODUCTION
  case SANDBOX
  case DEV
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public class DigioTaskResponse {
  public var task: DigiokycSDK.DigioTaskRequest?
  public var response: Foundation.NSMutableDictionary!
  public var success: Swift.Bool
  public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class CameraGraphicView : UIKit.UIView {
  @_Concurrency.MainActor @preconcurrency public var draw: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency public func update()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency public func handleDraw(detectionBox: CoreFoundation.CGRect, faceContours: [CoreFoundation.CGPoint])
  @_Concurrency.MainActor @preconcurrency public func handleDraw(detectionBox: CoreFoundation.CGRect)
  @_Concurrency.MainActor @preconcurrency public func clear()
  @_Concurrency.MainActor @preconcurrency public func setSuggestionMessage(_ message: Swift.String?, _ textColor: UIKit.UIColor, _ backgroundColor: UIKit.UIColor)
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func layoutSubviews()
  @objc deinit
}
public class DigioTaskRequest {
  public init()
  public var taskType: DigiokycSDK.DigioTaskType?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FaceDetected {
  public var boundingBox: CoreFoundation.CGRect
  public var leftEyeOpenProbability: Swift.Float?
  public var rightEyeOpenProbability: Swift.Float?
  public var smilingProbability: Swift.Float?
  public var headEulerAngleX: Swift.Float?
  public var headEulerAngleY: Swift.Float?
  public var headEulerAngleZ: Swift.Float?
  public var contours: [CoreFoundation.CGPoint]
  public var isMultipleFaces: Swift.Bool
  public var numberOfFaces: Swift.Int
  @objc deinit
}
public enum KeyError : Swift.String {
  case INVALID_CAPTURE_TYPE
  case INVALID_CAMERA_LENS
  case INVALID_NUMBER_OF_IMAGES
  case INVALID_TIME_BETWEEN_IMAGES
  case INVALID_OUTPUT_IMAGE_WIDTH
  case INVALID_OUTPUT_IMAGE_HEIGHT
  case INVALID_DETECTION_BOX_COLOR
  case INVALID_MINIMUM_SIZE
  case INVALID_MAXIMUM_SIZE
  case INVALID_ROI_TOP_OFFSET
  case INVALID_ROI_RIGHT_OFFSET
  case INVALID_ROI_BOTTOM_OFFSET
  case INVALID_ROI_LEFT_OFFSET
  case INVALID_ROI_COLOR
  case INVALID_FACE_CONTOURS_COLOR
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public protocol DigioKycDelegate {
  func clickedAgree(aadhaarNumebr: Swift.String, captcha: Swift.String)
  func cancelClicked()
  func onErrorResponse(statusCode: Swift.Int, errorMessage: Swift.String)
  func zipFileDownloaded(base64: Swift.String, sourceType: Swift.String, shareCode: Swift.String, fileName: Swift.String)
}
public class Facefy {
  public init()
  public func detect(_ image: UIKit.UIImage, _ minFaceWidth: CoreFoundation.CGFloat, onSuccess: @escaping (DigiokycSDK.FaceDetected?) -> Swift.Void, onError: @escaping (Swift.String) -> Swift.Void)
  @objc deinit
}
public enum DigioKYCFlow : Swift.String {
  case OLD_UIDAI
  case NEW_UIDAI
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class CaptureOptions {
  @objc deinit
}
@_hasMissingDesignatedInitializers public class NetworkReachability {
  @objc deinit
}
public enum PermissionType {
  case camera
  case microphone
  case photoLibrary
  case locationWhenInUse
  case notification
  public static func == (a: DigiokycSDK.PermissionType, b: DigiokycSDK.PermissionType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class DigioEventConstants {
  public static let CANCELLED_BY_USER: Swift.String
  public static let OFFLINE_KYC: Swift.String
  public static let SESSION_START: Swift.String
  public static let AADHAAR_SCREEN: Swift.String
  public static let AADHAAR_NUMBER_ENTERED: Swift.String
  public static let CAPTCHA_ENTERED: Swift.String
  public static let UIDAI_OTP_GENERATED_CLICKED: Swift.String
  public static let UIDAI_RESEND_OTP_CLICKED: Swift.String
  public static let OTP_SCREEN: Swift.String
  public static let OTP_ENTERED: Swift.String
  public static let FINISH_EKYC: Swift.String
  public static let OFFLINE_KYC_SUCCESS: Swift.String
  public static let SHARE_CODE_SCREEN: Swift.String
  public static let INVALID_SESSION_UIDAI: Swift.String
  public static let UIDAI_LOADING_ERROR: Swift.String
  public static let ACTION_UIDAI_UPSTREAM_CONNECT: Swift.String
  public static let AADHAAR_FETCHING_TIME_OUT: Swift.String
  public static let AGREE_PROCEED: Swift.String
  public static let ACTION_UIDAI_TEMPORARY_ERROR: Swift.String
  public static let UIDAI_SERVICE_DOWN: Swift.String
  @objc deinit
}
extension DigiokycSDK.DigioTaskType : Swift.Equatable {}
extension DigiokycSDK.DigioTaskType : Swift.Hashable {}
extension DigiokycSDK.DigioTaskType : Swift.RawRepresentable {}
extension DigiokycSDK.PermissionStatus : Swift.Equatable {}
extension DigiokycSDK.PermissionStatus : Swift.Hashable {}
extension DigiokycSDK.CaptureType : Swift.Equatable {}
extension DigiokycSDK.CaptureType : Swift.Hashable {}
extension DigiokycSDK.CaptureType : Swift.RawRepresentable {}
extension DigiokycSDK.CameraMode : Swift.Equatable {}
extension DigiokycSDK.CameraMode : Swift.Hashable {}
extension DigiokycSDK.CameraMode : Swift.RawRepresentable {}
extension DigiokycSDK.Message : Swift.Equatable {}
extension DigiokycSDK.Message : Swift.Hashable {}
extension DigiokycSDK.Message : Swift.RawRepresentable {}
extension DigiokycSDK.DigioEnvironment : Swift.Equatable {}
extension DigiokycSDK.DigioEnvironment : Swift.Hashable {}
extension DigiokycSDK.DigioEnvironment : Swift.RawRepresentable {}
extension DigiokycSDK.KeyError : Swift.Equatable {}
extension DigiokycSDK.KeyError : Swift.Hashable {}
extension DigiokycSDK.KeyError : Swift.RawRepresentable {}
extension DigiokycSDK.DigioKYCFlow : Swift.Equatable {}
extension DigiokycSDK.DigioKYCFlow : Swift.Hashable {}
extension DigiokycSDK.DigioKYCFlow : Swift.RawRepresentable {}
extension DigiokycSDK.PermissionType : Swift.Equatable {}
extension DigiokycSDK.PermissionType : Swift.Hashable {}
